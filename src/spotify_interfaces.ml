(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
module Org_freedesktop_DBus_Introspectable =
struct
  let interface = "org.freedesktop.DBus.Introspectable"
  let m_Introspect = {
    Method.interface = interface;
    Method.member = "Introspect";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "xml_data", basic_string));
    Method.annotations = [];
  }
end
module Org_freedesktop_DBus_Peer =
struct
  let interface = "org.freedesktop.DBus.Peer"
  let m_GetMachineId = {
    Method.interface = interface;
    Method.member = "GetMachineId";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "machine_uuid", basic_string));
    Method.annotations = [];
  }
  let m_Ping = {
    Method.interface = interface;
    Method.member = "Ping";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
end
module Org_freedesktop_DBus_Properties =
struct
  let interface = "org.freedesktop.DBus.Properties"
  let m_Get = {
    Method.interface = interface;
    Method.member = "Get";
    Method.i_args = (arg2
                       (Some "interface_name", basic_string)
                       (Some "property_name", basic_string));
    Method.o_args = (arg1
                       (Some "value", variant));
    Method.annotations = [];
  }
  let m_GetAll = {
    Method.interface = interface;
    Method.member = "GetAll";
    Method.i_args = (arg1
                       (Some "interface_name", basic_string));
    Method.o_args = (arg1
                       (Some "properties", dict string variant));
    Method.annotations = [];
  }
  let m_Set = {
    Method.interface = interface;
    Method.member = "Set";
    Method.i_args = (arg3
                       (Some "interface_name", basic_string)
                       (Some "property_name", basic_string)
                       (Some "value", variant));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg3
                       (Some "interface_name", basic_string)
                       (Some "changed_properties", dict string variant)
                       (Some "invalidated_properties", array basic_string));
    Signal.annotations = [];
  }
end
module Org_mpris_MediaPlayer2 =
struct
  let interface = "org.mpris.MediaPlayer2"
  let m_Quit = {
    Method.interface = interface;
    Method.member = "Quit";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Raise = {
    Method.interface = interface;
    Method.member = "Raise";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let p_CanQuit = {
    Property.interface = interface;
    Property.member = "CanQuit";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_CanRaise = {
    Property.interface = interface;
    Property.member = "CanRaise";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DesktopEntry = {
    Property.interface = interface;
    Property.member = "DesktopEntry";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_HasTrackList = {
    Property.interface = interface;
    Property.member = "HasTrackList";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Identity = {
    Property.interface = interface;
    Property.member = "Identity";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_SupportedMimeTypes = {
    Property.interface = interface;
    Property.member = "SupportedMimeTypes";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_SupportedUriSchemes = {
    Property.interface = interface;
    Property.member = "SupportedUriSchemes";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
end
module Org_mpris_MediaPlayer2_Player =
struct
  let interface = "org.mpris.MediaPlayer2.Player"
  let m_Next = {
    Method.interface = interface;
    Method.member = "Next";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_OpenUri = {
    Method.interface = interface;
    Method.member = "OpenUri";
    Method.i_args = (arg1
                       (Some "Uri", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Pause = {
    Method.interface = interface;
    Method.member = "Pause";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Play = {
    Method.interface = interface;
    Method.member = "Play";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_PlayPause = {
    Method.interface = interface;
    Method.member = "PlayPause";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Previous = {
    Method.interface = interface;
    Method.member = "Previous";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Seek = {
    Method.interface = interface;
    Method.member = "Seek";
    Method.i_args = (arg1
                       (Some "Offset", basic_int64));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_SetPosition = {
    Method.interface = interface;
    Method.member = "SetPosition";
    Method.i_args = (arg2
                       (Some "TrackId", basic_object_path)
                       (Some "Position", basic_int64));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Stop = {
    Method.interface = interface;
    Method.member = "Stop";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let s_Seeked = {
    Signal.interface = interface;
    Signal.member = "Seeked";
    Signal.args = (arg1
                       (Some "Position", basic_int64));
    Signal.annotations = [];
  }
  let p_CanControl = {
    Property.interface = interface;
    Property.member = "CanControl";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_CanGoNext = {
    Property.interface = interface;
    Property.member = "CanGoNext";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_CanGoPrevious = {
    Property.interface = interface;
    Property.member = "CanGoPrevious";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_CanPause = {
    Property.interface = interface;
    Property.member = "CanPause";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_CanPlay = {
    Property.interface = interface;
    Property.member = "CanPlay";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_CanSeek = {
    Property.interface = interface;
    Property.member = "CanSeek";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_LoopStatus = {
    Property.interface = interface;
    Property.member = "LoopStatus";
    Property.typ = basic_string;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_MaximumRate = {
    Property.interface = interface;
    Property.member = "MaximumRate";
    Property.typ = basic_double;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Metadata = {
    Property.interface = interface;
    Property.member = "Metadata";
    Property.typ = dict string variant;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_MinimumRate = {
    Property.interface = interface;
    Property.member = "MinimumRate";
    Property.typ = basic_double;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PlaybackStatus = {
    Property.interface = interface;
    Property.member = "PlaybackStatus";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Position = {
    Property.interface = interface;
    Property.member = "Position";
    Property.typ = basic_int64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Rate = {
    Property.interface = interface;
    Property.member = "Rate";
    Property.typ = basic_double;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_Shuffle = {
    Property.interface = interface;
    Property.member = "Shuffle";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_Volume = {
    Property.interface = interface;
    Property.member = "Volume";
    Property.typ = basic_double;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
end
